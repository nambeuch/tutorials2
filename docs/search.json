[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Income Section - R tutorials",
    "section": "",
    "text": "This Quarto document will contain the list of all our tutorials. It’s still under construction …"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Us",
    "section": "",
    "text": "This Quarto Website is about R. We aim to provide to methodologists a centralized space where they can share code and good practices."
  },
  {
    "objectID": "DataFrame_manipulations.html",
    "href": "DataFrame_manipulations.html",
    "title": "Data frame manipulations base R",
    "section": "",
    "text": "In this tutorial, we show how to create a data frame. Then we move on to some manipulations with data frames.\nIt is one of the most frequent used objects in R. It is not atomic - it can contain more than one data types. For instance, some variables can be characters while others are numeric.\nA data frame object is a recursive object. A data frame is stored internally as a list, as the result of a call to typeof(data.frame) will return.\nA data frame object has attributes: names, row.names, and class."
  },
  {
    "objectID": "DataFrame_manipulations.html#creating-a-data-frame",
    "href": "DataFrame_manipulations.html#creating-a-data-frame",
    "title": "Data frame manipulations base R",
    "section": "Creating a Data Frame",
    "text": "Creating a Data Frame\n\ndata_frame <- data.frame(id = c(1,2,3,4), income = rnorm(4, 100, 2), \n                         expense = rnorm(4, 50, 1))\n\nsummary(data_frame)\n\n       id           income          expense     \n Min.   :1.00   Min.   : 98.31   Min.   :49.64  \n 1st Qu.:1.75   1st Qu.: 99.57   1st Qu.:49.73  \n Median :2.50   Median :100.65   Median :50.02  \n Mean   :2.50   Mean   :100.32   Mean   :50.02  \n 3rd Qu.:3.25   3rd Qu.:101.40   3rd Qu.:50.31  \n Max.   :4.00   Max.   :101.66   Max.   :50.39  \n\nsecond_data_frame <- data.frame( id = c(2,3,6,7), wages = rnorm(4, 20, 1))"
  },
  {
    "objectID": "DataFrame_manipulations.html#sorting-data-frame",
    "href": "DataFrame_manipulations.html#sorting-data-frame",
    "title": "Data frame manipulations base R",
    "section": "Sorting Data Frame",
    "text": "Sorting Data Frame\nSorting a data frame is an operation that is often done. One way to do it is to use the function “order()” which will return a vector of indices of the sorted data.frame.\n\ndata_frame_sorted <- data_frame[order(data_frame$income, decreasing = TRUE),]\ndata_frame_sorted\n\n  id    income  expense\n1  1 101.65891 49.64098\n4  4 101.31637 50.28141\n2  2  99.98873 50.38523\n3  3  98.31278 49.75753"
  },
  {
    "objectID": "DataFrame_manipulations.html#summary-statistics-from-data-frame",
    "href": "DataFrame_manipulations.html#summary-statistics-from-data-frame",
    "title": "Data frame manipulations base R",
    "section": "Summary Statistics from Data Frame",
    "text": "Summary Statistics from Data Frame\n\naggregate(x = state.x77, by = list(Region = state.region), mean)\n\n         Region Population   Income Illiteracy Life Exp    Murder  HS Grad\n1     Northeast   5495.111 4570.222   1.000000 71.26444  4.722222 53.96667\n2         South   4208.125 4011.938   1.737500 69.70625 10.581250 44.34375\n3 North Central   4803.000 4611.083   0.700000 71.76667  5.275000 54.51667\n4          West   2915.308 4702.615   1.023077 71.23462  7.215385 62.00000\n     Frost      Area\n1 132.7778  18141.00\n2  64.6250  54605.12\n3 138.8333  62652.00\n4 102.1538 134463.00\n\n\n\ntestDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),\n                     v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )\n\nby1 <- c(\"red\", \"blue\", 1, 2, NA, \"big\", 1, 2, \"red\", 1, NA, 12)\nby2 <- by2 <- c(\"wet\", \"dry\", 99, 95, NA, \"damp\", 95, 99, \"red\", 99, NA, NA)\n\naggregate(x = testDF, by = list(by1), FUN = \"mean\")\n\n  Group.1  v1   v2\n1       1 5.0 55.0\n2      12 9.0 99.0\n3       2  NA   NA\n4     big 3.0 33.0\n5    blue 3.0 33.0\n6     red 2.5 27.5\n\n\n\n# produce the average of weight by feed.\naggregate(weight ~ feed, data = chickwts, mean)\n\n       feed   weight\n1    casein 323.5833\n2 horsebean 160.2000\n3   linseed 218.7500\n4  meatmeal 276.9091\n5   soybean 246.4286\n6 sunflower 328.9167\n\n\nUsing a formula with more than two other variables.\n\nwarpbreaks\n\n   breaks wool tension\n1      26    A       L\n2      30    A       L\n3      54    A       L\n4      25    A       L\n5      70    A       L\n6      52    A       L\n7      51    A       L\n8      26    A       L\n9      67    A       L\n10     18    A       M\n11     21    A       M\n12     29    A       M\n13     17    A       M\n14     12    A       M\n15     18    A       M\n16     35    A       M\n17     30    A       M\n18     36    A       M\n19     36    A       H\n20     21    A       H\n21     24    A       H\n22     18    A       H\n23     10    A       H\n24     43    A       H\n25     28    A       H\n26     15    A       H\n27     26    A       H\n28     27    B       L\n29     14    B       L\n30     29    B       L\n31     19    B       L\n32     29    B       L\n33     31    B       L\n34     41    B       L\n35     20    B       L\n36     44    B       L\n37     42    B       M\n38     26    B       M\n39     19    B       M\n40     16    B       M\n41     39    B       M\n42     28    B       M\n43     21    B       M\n44     39    B       M\n45     29    B       M\n46     20    B       H\n47     21    B       H\n48     24    B       H\n49     17    B       H\n50     13    B       H\n51     15    B       H\n52     15    B       H\n53     16    B       H\n54     28    B       H\n\naggregate(breaks ~ wool + tension, data = warpbreaks, mean)\n\n  wool tension   breaks\n1    A       L 44.55556\n2    B       L 28.22222\n3    A       M 24.00000\n4    B       M 28.77778\n5    A       H 24.55556\n6    B       H 18.77778\n\n\n\nairquality\n\n    Ozone Solar.R Wind Temp Month Day\n1      41     190  7.4   67     5   1\n2      36     118  8.0   72     5   2\n3      12     149 12.6   74     5   3\n4      18     313 11.5   62     5   4\n5      NA      NA 14.3   56     5   5\n6      28      NA 14.9   66     5   6\n7      23     299  8.6   65     5   7\n8      19      99 13.8   59     5   8\n9       8      19 20.1   61     5   9\n10     NA     194  8.6   69     5  10\n11      7      NA  6.9   74     5  11\n12     16     256  9.7   69     5  12\n13     11     290  9.2   66     5  13\n14     14     274 10.9   68     5  14\n15     18      65 13.2   58     5  15\n16     14     334 11.5   64     5  16\n17     34     307 12.0   66     5  17\n18      6      78 18.4   57     5  18\n19     30     322 11.5   68     5  19\n20     11      44  9.7   62     5  20\n21      1       8  9.7   59     5  21\n22     11     320 16.6   73     5  22\n23      4      25  9.7   61     5  23\n24     32      92 12.0   61     5  24\n25     NA      66 16.6   57     5  25\n26     NA     266 14.9   58     5  26\n27     NA      NA  8.0   57     5  27\n28     23      13 12.0   67     5  28\n29     45     252 14.9   81     5  29\n30    115     223  5.7   79     5  30\n31     37     279  7.4   76     5  31\n32     NA     286  8.6   78     6   1\n33     NA     287  9.7   74     6   2\n34     NA     242 16.1   67     6   3\n35     NA     186  9.2   84     6   4\n36     NA     220  8.6   85     6   5\n37     NA     264 14.3   79     6   6\n38     29     127  9.7   82     6   7\n39     NA     273  6.9   87     6   8\n40     71     291 13.8   90     6   9\n41     39     323 11.5   87     6  10\n42     NA     259 10.9   93     6  11\n43     NA     250  9.2   92     6  12\n44     23     148  8.0   82     6  13\n45     NA     332 13.8   80     6  14\n46     NA     322 11.5   79     6  15\n47     21     191 14.9   77     6  16\n48     37     284 20.7   72     6  17\n49     20      37  9.2   65     6  18\n50     12     120 11.5   73     6  19\n51     13     137 10.3   76     6  20\n52     NA     150  6.3   77     6  21\n53     NA      59  1.7   76     6  22\n54     NA      91  4.6   76     6  23\n55     NA     250  6.3   76     6  24\n56     NA     135  8.0   75     6  25\n57     NA     127  8.0   78     6  26\n58     NA      47 10.3   73     6  27\n59     NA      98 11.5   80     6  28\n60     NA      31 14.9   77     6  29\n61     NA     138  8.0   83     6  30\n62    135     269  4.1   84     7   1\n63     49     248  9.2   85     7   2\n64     32     236  9.2   81     7   3\n65     NA     101 10.9   84     7   4\n66     64     175  4.6   83     7   5\n67     40     314 10.9   83     7   6\n68     77     276  5.1   88     7   7\n69     97     267  6.3   92     7   8\n70     97     272  5.7   92     7   9\n71     85     175  7.4   89     7  10\n72     NA     139  8.6   82     7  11\n73     10     264 14.3   73     7  12\n74     27     175 14.9   81     7  13\n75     NA     291 14.9   91     7  14\n76      7      48 14.3   80     7  15\n77     48     260  6.9   81     7  16\n78     35     274 10.3   82     7  17\n79     61     285  6.3   84     7  18\n80     79     187  5.1   87     7  19\n81     63     220 11.5   85     7  20\n82     16       7  6.9   74     7  21\n83     NA     258  9.7   81     7  22\n84     NA     295 11.5   82     7  23\n85     80     294  8.6   86     7  24\n86    108     223  8.0   85     7  25\n87     20      81  8.6   82     7  26\n88     52      82 12.0   86     7  27\n89     82     213  7.4   88     7  28\n90     50     275  7.4   86     7  29\n91     64     253  7.4   83     7  30\n92     59     254  9.2   81     7  31\n93     39      83  6.9   81     8   1\n94      9      24 13.8   81     8   2\n95     16      77  7.4   82     8   3\n96     78      NA  6.9   86     8   4\n97     35      NA  7.4   85     8   5\n98     66      NA  4.6   87     8   6\n99    122     255  4.0   89     8   7\n100    89     229 10.3   90     8   8\n101   110     207  8.0   90     8   9\n102    NA     222  8.6   92     8  10\n103    NA     137 11.5   86     8  11\n104    44     192 11.5   86     8  12\n105    28     273 11.5   82     8  13\n106    65     157  9.7   80     8  14\n107    NA      64 11.5   79     8  15\n108    22      71 10.3   77     8  16\n109    59      51  6.3   79     8  17\n110    23     115  7.4   76     8  18\n111    31     244 10.9   78     8  19\n112    44     190 10.3   78     8  20\n113    21     259 15.5   77     8  21\n114     9      36 14.3   72     8  22\n115    NA     255 12.6   75     8  23\n116    45     212  9.7   79     8  24\n117   168     238  3.4   81     8  25\n118    73     215  8.0   86     8  26\n119    NA     153  5.7   88     8  27\n120    76     203  9.7   97     8  28\n121   118     225  2.3   94     8  29\n122    84     237  6.3   96     8  30\n123    85     188  6.3   94     8  31\n124    96     167  6.9   91     9   1\n125    78     197  5.1   92     9   2\n126    73     183  2.8   93     9   3\n127    91     189  4.6   93     9   4\n128    47      95  7.4   87     9   5\n129    32      92 15.5   84     9   6\n130    20     252 10.9   80     9   7\n131    23     220 10.3   78     9   8\n132    21     230 10.9   75     9   9\n133    24     259  9.7   73     9  10\n134    44     236 14.9   81     9  11\n135    21     259 15.5   76     9  12\n136    28     238  6.3   77     9  13\n137     9      24 10.9   71     9  14\n138    13     112 11.5   71     9  15\n139    46     237  6.9   78     9  16\n140    18     224 13.8   67     9  17\n141    13      27 10.3   76     9  18\n142    24     238 10.3   68     9  19\n143    16     201  8.0   82     9  20\n144    13     238 12.6   64     9  21\n145    23      14  9.2   71     9  22\n146    36     139 10.3   81     9  23\n147     7      49 10.3   69     9  24\n148    14      20 16.6   63     9  25\n149    30     193  6.9   70     9  26\n150    NA     145 13.2   77     9  27\n151    14     191 14.3   75     9  28\n152    18     131  8.0   76     9  29\n153    20     223 11.5   68     9  30\n\naggregate(cbind(Ozone, Temp) ~ Month, data = airquality, mean)\n\n  Month    Ozone     Temp\n1     5 23.61538 66.73077\n2     6 29.44444 78.22222\n3     7 59.11538 83.88462\n4     8 59.96154 83.96154\n5     9 31.44828 76.89655"
  },
  {
    "objectID": "dplyr.html",
    "href": "dplyr.html",
    "title": "Data Manipulations - dplyr",
    "section": "",
    "text": "#install.packages(\"dplyr\")\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\nSample data"
  },
  {
    "objectID": "dplyr.html#read",
    "href": "dplyr.html#read",
    "title": "Data Manipulations - dplyr",
    "section": "Read",
    "text": "Read\n\nFiltering rows based on conditions\nUse the function filter function\n\nfiltered_data <- data %>% filter(Age > 30)\n\nfiltered_data\n\n     Name Age Department\n1 Charlie  35    Finance\n2   David  40         HR\n\n\n\n\nSelecting columns\n\nselected_data <- data %>% select(Name, Age)\n\n\n\nArranging rows\nUse the arrange() function to sort rows based on one or more columns\n\nsorted_data <- data %>% arrange(Age)\nsorted_data\n\n     Name Age Department\n1   Alice  25         HR\n2     Bob  30         IT\n3 Charlie  35    Finance\n4   David  40         HR\n\n\n\n\nGroup and summarize\nUse the ** group_by()** and summarize() functions to group and summarize data.\n\ngrouped_data <- data %>% group_by(Department) %>% summarize(AvgAge = mean(Age))\n\n\n\nMutate\nUse the mutate() function to create or modify columns\n\nmutated_data <- data %>% mutate(Salary = Age * 1000)\n\n\n\nJoin Data Frames\nWe can use functions like left_join() , inner_join() etc.\n\nemployees <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Salary = c(50000, 60000, 55000)\n)\n\njoined_data <- data %>% left_join(employees, by = \"Name\")\n\n\nrighter <- data %>% right_join(employees, by = \"Name\")\n\n\n\nPipes\n\nfinal_result <- data %>%\n  filter(Age > 30) %>%\n  select(Name, Age) %>%\n  arrange(Age)"
  },
  {
    "objectID": "dplyr.html#practice",
    "href": "dplyr.html#practice",
    "title": "Data Manipulations - dplyr",
    "section": "Practice",
    "text": "Practice\nDownload a PUMF file from one of your favorite survey.\n\nzip_path <- \"https://www150.statcan.gc.ca/n1/en/pub/46-25-0001/2021001/2021.zip\"\nextract_path <- tempfile()\ndownload.file(url = zip_path, destfile = extract_path, method = \"auto\", quiet = TRUE)\n\nunzip(extract_path, files = paste0(extract_path, \"/\", \"2021_CHS_PUMF/Data/CHS2021ECL_PUMF.csv\")) \n\nWarning in unzip(extract_path, files = paste0(extract_path, \"/\",\n\"2021_CHS_PUMF/Data/CHS2021ECL_PUMF.csv\")): requested file not found in the zip\nfile"
  },
  {
    "objectID": "Factors.html",
    "href": "Factors.html",
    "title": "Factors",
    "section": "",
    "text": "Factor is an object in R usually uses for the manipulations of categorical variables. Factor is used to encode a vector as a factor (the terms ‘category’ and ‘enumerated type’ are used for factors)."
  },
  {
    "objectID": "Factors.html#creating-a-factor-variable",
    "href": "Factors.html#creating-a-factor-variable",
    "title": "Factors",
    "section": "Creating a factor variable",
    "text": "Creating a factor variable\n\n# Create a vector with some categorical data\ndata_vector <- c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\")\n\n# Create a factor variable\nfactor_variable <- factor(data_vector)\n\n# Print the factor variable\nprint(factor_variable)\n\n[1] A B A C B A\nLevels: A B C"
  },
  {
    "objectID": "Factors.html#specifying-custom-levels",
    "href": "Factors.html#specifying-custom-levels",
    "title": "Factors",
    "section": "Specifying Custom Levels",
    "text": "Specifying Custom Levels\nYou can custom levels for your factor variable using the ‘levels’ argument:\n\n# Create a factor variable with custom levels\ncustom_levels <- factor(data_vector, levels = c(\"A\",\"B\",\"C\"))\n\n\n# Print the factor variable with custome levels\nprint(custom_levels)\n\n[1] A B A C B A\nLevels: A B C"
  },
  {
    "objectID": "Factors.html#changing-the-order-of-levels",
    "href": "Factors.html#changing-the-order-of-levels",
    "title": "Factors",
    "section": "Changing the Order of levels",
    "text": "Changing the Order of levels\nThe order of levels in a factor can be changed using the ‘levels’ function.\n\nfactor_variable <- factor(data_vector, levels = c(\"C\",\"A\",\"B\"))\n\n# Print the factor variable with changed levels\nprint(factor_variable)\n\n[1] A B A C B A\nLevels: C A B"
  },
  {
    "objectID": "Factors.html#summary-statistics",
    "href": "Factors.html#summary-statistics",
    "title": "Factors",
    "section": "Summary Statistics",
    "text": "Summary Statistics\nFactor variables are useful for summarizing data. Functions such as ‘table’ can be used in combination with factor variables.\n\nsummary_variable <- table(factor_variable)\nprint(summary_variable)\n\nfactor_variable\nC A B \n1 3 2"
  },
  {
    "objectID": "Factors.html#using-factor-in-statistical-analysis",
    "href": "Factors.html#using-factor-in-statistical-analysis",
    "title": "Factors",
    "section": "Using Factor in Statistical Analysis",
    "text": "Using Factor in Statistical Analysis\n\n# Create a numeric variable\nnumeric_data <- c(10, 15, 12, 20, 18, 25)\n\nfactor_variable <- factor(data_vector, levels = c(\"A\",\"B\"))\n\n# Perform a simple t-test by factor level\nt_test_result <- t.test(numeric_data ~ factor_variable)\n\n# Print the t-test result\nprint(t_test_result)\n\n\n    Welch Two Sample t-test\n\ndata:  numeric_data by factor_variable\nt = -0.16884, df = 2.3785, p-value = 0.8792\nalternative hypothesis: true difference in means between group A and group B is not equal to 0\n95 percent confidence interval:\n -19.13866  17.47200\nsample estimates:\nmean in group A mean in group B \n       15.66667        16.50000"
  },
  {
    "objectID": "List.html",
    "href": "List.html",
    "title": "Lists",
    "section": "",
    "text": "A list is a versatile data structure in R that can hold elements of different data types.\nLists are not atomic; they are composite data structures.\nLists can be recursive, meaning they can contain other lists.\nLists can have attributes, which are metadata associated with the list. These attributes can include names, dimensions, or other information."
  },
  {
    "objectID": "List.html#create",
    "href": "List.html#create",
    "title": "Lists",
    "section": "Create",
    "text": "Create\n\n# Create an empty list\nmy_list <- list()\n\n# Create a list with elements of different types\nmixed_list <- list(1, \"apple\", 3.14, TRUE)\n\n# Create a list with named elements\nnamed_list <- list(name = \"Alice\", age = 30, city = \"New York\")\n\n\nAttributes\n\nattributes(mixed_list)\n\nNULL\n\n# Adding names to a list\nnames(mixed_list) <- c(\"Number\", \"Fruit\", \"Value\", \"Boolean\")\n\n# Adding dimensions to a list\ndim(mixed_list) <- c(2, 2)\n\nattributes(mixed_list)\n\n$dim\n[1] 2 2"
  },
  {
    "objectID": "List.html#read",
    "href": "List.html#read",
    "title": "Lists",
    "section": "Read",
    "text": "Read\n\n# Access elements by index\nfirst_element <- mixed_list[[1]]\nsecond_element <- mixed_list[[2]]\n\n# Access elements by name\nalice_age <- named_list$name\nalice_city <- named_list$city"
  },
  {
    "objectID": "List.html#update",
    "href": "List.html#update",
    "title": "Lists",
    "section": "Update",
    "text": "Update\n\n# Modify an element\nmixed_list[[2]] <- \"banana\"\n\n# Add a new element\nmixed_list[[5]] <- \"cherry\"\n\n# Modify named elements\nnamed_list$age <- 31\nnamed_list$city <- \"Los Angeles\""
  },
  {
    "objectID": "List.html#delete",
    "href": "List.html#delete",
    "title": "Lists",
    "section": "Delete",
    "text": "Delete\n\n# Remove an element by index\nrm_element <- mixed_list[[3]]\nmixed_list <- mixed_list[-3]\n\n# Remove an element by name\nrm(named_list)"
  },
  {
    "objectID": "Matrix.html",
    "href": "Matrix.html",
    "title": "Matrix",
    "section": "",
    "text": "Matrices are also one of the most popular objects in R, especially in the area of statistics. For instance, they are often used in linear regression.\nA matrix is a two by two containers that can\nbe used to store data and facilitates some computations. Matrices belong to the categories of atomic and non-recursive objects. They can have attributes such as their dimensions and dimension names."
  },
  {
    "objectID": "Matrix.html#creating-matrices",
    "href": "Matrix.html#creating-matrices",
    "title": "Matrix",
    "section": "Creating matrices",
    "text": "Creating matrices\nTo create a matrix, one can used functions ** matrix()** and ** as.matrix**. For more information on this function enters ** help(matrix)** in the terminal. Below are some examples on how to create matrices.\n\n# for the help\nhelp(matrix)\n\n\n# Creating a matrix from raw data\nmat1 <- matrix(data = c(10,20,30, 46, 70, 80), nrow = 2, ncol = 3, byrow = FALSE, dimnames = NULL )\n\n## we can add names to both columns and rows.\ndimnames(mat1) <- list(ligne = c(\"un\",\"deux\"), colonne = c(\"c1\",\"c2\",\"c3\"))\nmat1\n\n      colonne\nligne  c1 c2 c3\n  un   10 30 70\n  deux 20 46 80\n\n## look for attributes\nattributes(mat1) # dim expresses the fact that matrix is 2x3, dimnames has two components: ligne and colonne.\n\n$dim\n[1] 2 3\n\n$dimnames\n$dimnames$ligne\n[1] \"un\"   \"deux\"\n\n$dimnames$colonne\n[1] \"c1\" \"c2\" \"c3\"\n\n# to get access to one attribute\nattr(mat1, \"dimnames\")\n\n$ligne\n[1] \"un\"   \"deux\"\n\n$colonne\n[1] \"c1\" \"c2\" \"c3\"\n\n\nA matrix is an atomic object. The following lines of code is an illustration that matrices can only host one data type. If a different data types are provided, R try to create the matrix using the most suitable data type.\n\nmat2 <- matrix(c(10, 'a', 3, 6), nrow = 2, byrow = TRUE)\nmat2 ## R has set the mode of each element in the matrix to characters\n\n     [,1] [,2]\n[1,] \"10\" \"a\" \n[2,] \"3\"  \"6\" \n\nmode(mat2)\n\n[1] \"character\"\n\n\nA matrix is a non-recursive object. That is, it cannot contain other matrices or any other objects. The example illustrates this point.\n\nmat3 <- matrix(c(1,2,3,4), nrow = 2)\n\nUsing the function ** as.matrix** to create a matrix.\n\nmat4 <- as.matrix(c(1,2,3,4))\nmat4 # a matrix of 4 rows and one column\n\n     [,1]\n[1,]    1\n[2,]    2\n[3,]    3\n[4,]    4"
  },
  {
    "objectID": "Matrix.html#reading-matrices",
    "href": "Matrix.html#reading-matrices",
    "title": "Matrix",
    "section": "Reading matrices",
    "text": "Reading matrices\nRead the whole matrix.\n\nprint(mat1)\n\n      colonne\nligne  c1 c2 c3\n  un   10 30 70\n  deux 20 46 80\n\n\nRemove the dimnames attributes.\n\ndimnames(mat1) <- NULL\nmat1\n\n     [,1] [,2] [,3]\n[1,]   10   30   70\n[2,]   20   46   80\n\n\nAccessing elements in a matrix using ** [ ** operator.\n\n## access one element\nmat1[1,2] # at element at row 1 and column 2\n\n[1] 30\n\nprint(mat1[1,2])\n\n[1] 30\n\n## access more than one row\nmat1[1:2,] # rows 1 and 2 with all columns\n\n     [,1] [,2] [,3]\n[1,]   10   30   70\n[2,]   20   46   80\n\nprint(mat1[1:2,])\n\n     [,1] [,2] [,3]\n[1,]   10   30   70\n[2,]   20   46   80\n\n## access selected columns\nmat1[, 2:3]\n\n     [,1] [,2]\n[1,]   30   70\n[2,]   46   80\n\nprint(mat1[,2:3])\n\n     [,1] [,2]\n[1,]   30   70\n[2,]   46   80\n\n\nAccessing elements of a matrix using ** [[ **\n\nmat1\n\n     [,1] [,2] [,3]\n[1,]   10   30   70\n[2,]   20   46   80\n\n# the first element\nmat1[[1]]\n\n[1] 10\n\n## the fourth element\nmat1[[4]]\n\n[1] 46"
  },
  {
    "objectID": "ReadingExternalDataFiles.html",
    "href": "ReadingExternalDataFiles.html",
    "title": "Reading external data files",
    "section": "",
    "text": "In this tutorial, the focus is in reading various types of data, including files with extension csv, 7bdat and others.\nAs statistical consultants within the agency, we’ll often be faced by clients that would provide us with files in a proprietary format, such as SAS files, SPSS files, EXCEL files and others.\nThis tutorial provides some solutions to this problem and gives options on how to convert some of these data files into a format easily manipulated"
  },
  {
    "objectID": "vectors_visual.html",
    "href": "vectors_visual.html",
    "title": "Vectors",
    "section": "",
    "text": "Vectors are one the most popular objects in R. They are used to store data of same type - It is an atomic object. Moreover, vectors are also said to be non-recursive objects. That is, a vector cannot contain other vectors or any other objects.\nA vector can have an attribute names, that is each element can be assigned a name."
  },
  {
    "objectID": "vectors_visual.html#creating-vectors",
    "href": "vectors_visual.html#creating-vectors",
    "title": "Vectors",
    "section": "Creating vectors",
    "text": "Creating vectors\nVectors can be created using the function c().\n\n# Creating a vector numeric\nx <- c(1,2,3,4,5)\nclass(x) # checking the type of elements\n\n[1] \"numeric\"\n\nmode(x) # mode of the object - useful with vectors\n\n[1] \"numeric\"\n\n# characters\ny <- c('1', 'a', '3', '4')\nclass(y)\n\n[1] \"character\"\n\n# complex numbers\nz <- c(2 + 3i, 9 + 7i, 25 + 12i)\nclass(z)\n\n[1] \"complex\"\n\n# Boolean values\nu <- c(FALSE, TRUE, TRUE)\nclass(u) \n\n[1] \"logical\"\n\n\nTo get more information about the c() function, run the following command:\n\nhelp(c)\n\nWhen creating vectors, it is possible to add names to each of the elements of the vectors. The example below shows this can be done.\n\nx <- 1:26 # create a vector of integers\nnames(x) <- letters[1:length(x)] # letters[] is vectors of letters - I simply extracted the lenght(x) ones.\nx\n\n a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z \n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n\n# to see what attributes are available\nattributes(x)\n\n$names\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n# to extract a specific attributes\nattr(x, \"names\") # returns the vector of names.\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\nTo remove the attribute, we can use the following line of code\n\nx <- c(x, recursive = FALSE, use.names = FALSE) # the last parameter indicates names should not be retained\nx # check if it worked\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26"
  },
  {
    "objectID": "vectors_visual.html#reading-a-whole-or-a-subset-of-a-vector",
    "href": "vectors_visual.html#reading-a-whole-or-a-subset-of-a-vector",
    "title": "Vectors",
    "section": "Reading a whole or a subset of a vector",
    "text": "Reading a whole or a subset of a vector\nTo get the full content of a vector, just print it.\n\n# option 1\nprint(x)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26\n\n# option 2\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26\n\n# option 3\ncat(x)\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n\n\nTo access a subset of the vector, there are two operators that can be used: “[” or “[[”. The difference between these two operators is nil for the vectors. But for other objects that we will encounter, here are some of the main differences. The single bracket “[” will return the same object as the original object. It can be used to extract one or more elements, whereas it is not the case for the double brackets. The latter will return the type of the element in the case of recursive objects.\n\n# access by position - remember that unlike language like C, the first element is at index 1 instead of 0.\nx[2] # the second element\n\n[1] 2\n\n# access elements from position 5 to 10\nx[5:10]\n\n[1]  5  6  7  8  9 10\n\n## can also access element using logical value\nx[c(rep(TRUE, 10), rep(FALSE, 90))]\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n## can also using some conditional expression that will return logical value\nx[ x > 9]\n\n [1] 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26"
  },
  {
    "objectID": "vectors_visual.html#updating-vectors",
    "href": "vectors_visual.html#updating-vectors",
    "title": "Vectors",
    "section": "Updating vectors",
    "text": "Updating vectors\nWhen a vector exists, it can be modified in various ways. In this section, some of the most common ways are illustrated.\n\n## updating the value at position 10 - with value 550\nx[10] <- 550\nprint(x)\n\n [1]   1   2   3   4   5   6   7   8   9 550  11  12  13  14  15  16  17  18  19\n[20]  20  21  22  23  24  25  26\n\n## Updating the second and third value of x\nx[c(2,3)] <- c(200,300)\nprint(x)\n\n [1]   1 200 300   4   5   6   7   8   9 550  11  12  13  14  15  16  17  18  19\n[20]  20  21  22  23  24  25  26\n\n## Double brackets can also be used - although not intuitive - remember only one value can be accessed at a time.\nx[[10]] <- 10\nprint(x)\n\n [1]   1 200 300   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19\n[20]  20  21  22  23  24  25  26\n\n# x[[8:10]] this won't work for instance.\n\n##"
  },
  {
    "objectID": "vectors_visual.html#deleting-objects",
    "href": "vectors_visual.html#deleting-objects",
    "title": "Vectors",
    "section": "Deleting objects",
    "text": "Deleting objects\nTo delete an object, for example vectors, we can use the function ** rm() . Below an example where we deleted the vector called z**.\n\n# list all the objects that are in the global environment.\nls()\n\n[1] \"u\" \"x\" \"y\" \"z\"\n\n# remove a specific objects\nrm(list = c(\"z\"))\n\n# can remove all the objects with the following  instruction\nrm(list =ls())"
  },
  {
    "objectID": "vectors_visual.html#what-we-have-learned",
    "href": "vectors_visual.html#what-we-have-learned",
    "title": "Vectors",
    "section": "What we have learned?",
    "text": "What we have learned?\n\n\nVectors’ features: attributes, atomic and non-recursive\n\n\nHow to create, read, update and delete vectors\n\n\nThe concept of vectorization\n\n\nResidual rule with vectors\n\n\nHow to perform some aggregate computation on vectors"
  },
  {
    "objectID": "factors_v2.html",
    "href": "factors_v2.html",
    "title": "Factors",
    "section": "",
    "text": "Factors are often used to analyze categorical variables.\nFactors have attributes: levels and class.\nThis tutorial is about the use of factors."
  },
  {
    "objectID": "factors_v2.html#creating-factors",
    "href": "factors_v2.html#creating-factors",
    "title": "Factors",
    "section": "Creating factors",
    "text": "Creating factors\nFactors can be created using the function factor. A given vector can also be coerced into a factor using the function as.factor.\n\n## SGC codes.\nprov_levels <- c(10,11,12,13,24,35,46,47,48,59)\nprov_levels <- as.character(prov_levels)\n\ndta <- c(\"47\", \"35\", \"11\", \"24\" ,\"48\", \"48\", \"59\", \"59\" ,\"24\", \"35\", \"13\" ,\"61\",\"12\", \"11\", \"13\", \"10\", \"59\", \"48\" ,\"62\", \"48\")\n\n\n## creating a factor variable based on dta\ndta_factor <- factor(dta, levels = prov_levels)\ndta_factor\n\n [1] 47   35   11   24   48   48   59   59   24   35   13   <NA> 12   11   13  \n[16] 10   59   48   <NA> 48  \nLevels: 10 11 12 13 24 35 46 47 48 59\n\n## attributes\nattributes(dta_factor)\n\n$levels\n [1] \"10\" \"11\" \"12\" \"13\" \"24\" \"35\" \"46\" \"47\" \"48\" \"59\"\n\n$class\n[1] \"factor\"\n\n\nWe can also create the factor variable without specifying the expected levels.\n\ndta_factor2 <- factor(dta)\n###> What to expect?"
  },
  {
    "objectID": "factors_v2.html#reading-a-factor-variable",
    "href": "factors_v2.html#reading-a-factor-variable",
    "title": "Factors",
    "section": "Reading a factor variable",
    "text": "Reading a factor variable\nWe can read a factor variable the same way we read a basic vector.\n\ndta_factor[1] # access first element\n\n[1] 47\nLevels: 10 11 12 13 24 35 46 47 48 59\n\ndta_factor[2:5] # elements from position 2 to 5\n\n[1] 35 11 24 48\nLevels: 10 11 12 13 24 35 46 47 48 59"
  },
  {
    "objectID": "factors_v2.html#updating-a-factor-variable",
    "href": "factors_v2.html#updating-a-factor-variable",
    "title": "Factors",
    "section": "Updating a factor variable",
    "text": "Updating a factor variable\nFactors can be updated by changing the value of the expected levels.\n\n## add territorial in the levels.\ndta_f_terr <- factor(dta, levels = c(prov_levels, c(\"60\",\"61\",\"62\")))\ndta_f_terr \n\n [1] 47 35 11 24 48 48 59 59 24 35 13 61 12 11 13 10 59 48 62 48\nLevels: 10 11 12 13 24 35 46 47 48 59 60 61 62"
  },
  {
    "objectID": "factors_v2.html#deleting-a-factor-variable",
    "href": "factors_v2.html#deleting-a-factor-variable",
    "title": "Factors",
    "section": "Deleting a factor variable",
    "text": "Deleting a factor variable\nLike any other objects.\n\nrm(list = c(\"dta_f_terr\"))"
  },
  {
    "objectID": "factors_v2.html#factors-in-practice",
    "href": "factors_v2.html#factors-in-practice",
    "title": "Factors",
    "section": "Factors in practice",
    "text": "Factors in practice\n\nIn a data.frame\n\nframe <- data.frame(income = rexp(20, rate = 0.05), province_code = dta)\n\nis.data.frame(frame)\n\n[1] TRUE\n\n## convert province_code to a factor\nframe$province_code <- factor(frame$province_code, levels = prov_levels)\nstr(frame)\n\n'data.frame':   20 obs. of  2 variables:\n $ income       : num  12.508 3.852 4.657 65.819 0.843 ...\n $ province_code: Factor w/ 10 levels \"10\",\"11\",\"12\",..: 8 6 2 5 9 9 10 10 5 6 ...\n\n\n\n\nEditing\n\n## identifying out of scope provinces and how many are they\n\nsum(is.na(frame$province_code)) \n\n[1] 2\n\n\n\n# computing table of frequency - remember function table\ntable(frame[, c(\"province_code\")], useNA = \"always\")\n\n\n  10   11   12   13   24   35   46   47   48   59 <NA> \n   1    2    1    2    2    2    0    1    4    3    2 \n\n\n\n## if we are not happy with the order - change the order in the levels\ndta_factor_2prov <- factor(frame$province_code, levels = c(\"35\", \"24\"))\ntable(dta_factor_2prov)\n\ndta_factor_2prov\n35 24 \n 2  2 \n\n\n\n## creating income classes\n\nframe$income_class <- cut(frame$income, breaks = min(frame$income) + 10*(0:5))\nframe\n\n       income province_code income_class\n1  12.5078527            47  (10.2,20.2]\n2   3.8523414            35 (0.218,10.2]\n3   4.6567616            11 (0.218,10.2]\n4  65.8185954            24         <NA>\n5   0.8429893            48 (0.218,10.2]\n6  10.1459341            48 (0.218,10.2]\n7   1.3170451            59 (0.218,10.2]\n8   1.2185156            59 (0.218,10.2]\n9  34.8648029            24  (30.2,40.2]\n10  5.9488788            35 (0.218,10.2]\n11 37.5066973            13  (30.2,40.2]\n12  0.2184135          <NA>         <NA>\n13 12.7143889            12  (10.2,20.2]\n14  2.2392595            11 (0.218,10.2]\n15 36.4473741            13  (30.2,40.2]\n16 33.9770265            10  (30.2,40.2]\n17  8.6680527            59 (0.218,10.2]\n18  2.5424218            48 (0.218,10.2]\n19 51.6963329          <NA>         <NA>\n20  1.1551268            48 (0.218,10.2]\n\n\n\ntable(frame$income_class, frame$province_code)\n\n              \n               10 11 12 13 24 35 46 47 48 59\n  (0.218,10.2]  0  2  0  0  0  2  0  0  4  3\n  (10.2,20.2]   0  0  1  0  0  0  0  1  0  0\n  (20.2,30.2]   0  0  0  0  0  0  0  0  0  0\n  (30.2,40.2]   1  0  0  2  1  0  0  0  0  0\n  (40.2,50.2]   0  0  0  0  0  0  0  0  0  0\n\n\n\n\nCreating some plots\nBarplot\n\nbarplot(table(dta_factor))\n\n\n\n## note that we can change the order in which the labels appear.\n\nPie Chart\n\npie(table(dta_factor_2prov))\n\n\n\n\nMosaicplot\n\nmosaicplot(table(frame$income_class, frame$province_code))\n\n\n\n\nRemarks\nFactors can be used to conduct statistical analyses involving categorical variables. Some models in R required the use of factors.\n\n# fitting a linear regression model\nlm(frame$income ~ frame$province_code)\n\n\nCall:\nlm(formula = frame$income ~ frame$province_code)\n\nCoefficients:\n          (Intercept)  frame$province_code11  frame$province_code12  \n                33.98                 -30.53                 -21.26  \nframe$province_code13  frame$province_code24  frame$province_code35  \n                 3.00                  16.36                 -29.08  \nframe$province_code47  frame$province_code48  frame$province_code59  \n               -21.47                 -30.31                 -30.24"
  },
  {
    "objectID": "Sas_R_comparisons.html",
    "href": "Sas_R_comparisons.html",
    "title": "SAS and R comparisons",
    "section": "",
    "text": "In this tutorial, we’ll review some of the data manipulations often performed in SAS, but in R. The tutorial is based on the following document:https://github.com/rstudio/cheatsheets/blob/main/pngs/sas-r.png"
  },
  {
    "objectID": "Sas_R_comparisons.html#installing-packages",
    "href": "Sas_R_comparisons.html#installing-packages",
    "title": "SAS and R comparisons",
    "section": "Installing packages",
    "text": "Installing packages\n\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nWarning in Sys.timezone(): unable to identify current timezone 'E':\nplease set environment variable 'TZ'\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"
  },
  {
    "objectID": "Sas_R_comparisons.html#donwloading-data",
    "href": "Sas_R_comparisons.html#donwloading-data",
    "title": "SAS and R comparisons",
    "section": "Donwloading data",
    "text": "Donwloading data\n\n# set your working directory\nsetwd(\"C:/Users/nambchr/Desktop/tutorials/tutorials\")\n\n# Define the URL of the ZIP file you want to download\nzip_url <- \"https://www150.statcan.gc.ca/n1/en/pub/71m0001x/2021001/2023-09-CSV.zip\"\n\n# Specify the destination directory where you want to save the ZIP file\ndestination_dir <- \"C:/Users/nambchr/Desktop/tutorials/tutorials/session3\"\n\n# Use download.file to download the ZIP file\ndownload.file(zip_url, destfile = file.path(destination_dir, \"2023-09-CSV.zip\"), mode = \"wb\")\n\n# Unzip the downloaded file\nunzip(file.path(destination_dir, \"2023-09-CSV.zip\"), exdir = paste0(destination_dir, \"/data\"))\n\n# You can now access the contents of the ZIP file in the destination directory"
  },
  {
    "objectID": "Sas_R_comparisons.html#reading-data",
    "href": "Sas_R_comparisons.html#reading-data",
    "title": "SAS and R comparisons",
    "section": "Reading data",
    "text": "Reading data\nIn this section, read a CSV dataset into a data.frame. Convert the data.frame into a tibble (https://tibble.tidyverse.org/).\n\nsetwd(paste0(destination_dir, \"/\", \"data\")) # set the working directory\nlfs_2023 <- read.csv(file = \"pub0923.csv\") # read the file\nhead(lfs_2023)\n\n  REC_NUM SURVYEAR SURVMNTH LFSSTAT PROV CMA AGE_12 AGE_6 SEX MARSTAT EDUC MJH\n1       1     2023        9       4   48   7     10    NA   2       1    2  NA\n2       2     2023        9       1   13   0     10    NA   1       1    5   1\n3       3     2023        9       4   24   0     12    NA   2       2    0  NA\n4       4     2023        9       1   47   0      7    NA   1       1    2   1\n5       5     2023        9       1   46   6      9    NA   1       6    3   1\n6       6     2023        9       4   35   3      2     4   2       2    4  NA\n  EVERWORK FTPTLAST COWMAIN IMMIG NAICS_21 NOC_10 NOC_43 YABSENT WKSAWAY\n1        2       NA      NA     3       NA     NA     NA      NA      NA\n2       NA       NA       6     3       15      9     40      NA      NA\n3        2       NA      NA     3       NA     NA     NA      NA      NA\n4       NA       NA       5     2        6      8     35      NA      NA\n5       NA       NA       6     3        6      1      4      NA      NA\n6        2       NA      NA     3       NA     NA     NA      NA      NA\n  PAYAWAY UHRSMAIN AHRSMAIN FTPTMAIN UTOTHRS ATOTHRS HRSAWAY YAWAY PAIDOT\n1      NA       NA       NA       NA      NA      NA      NA    NA     NA\n2      NA      250      250        2     250     250      NA    NA     NA\n3      NA       NA       NA       NA      NA      NA      NA    NA     NA\n4      NA      400      400        1     400     400      NA    NA     NA\n5      NA      500      500        1     500     500      NA    NA     NA\n6      NA       NA       NA       NA      NA      NA      NA    NA     NA\n  UNPAIDOT XTRAHRS WHYPT TENURE PREVTEN HRLYEARN UNION PERMTEMP ESTSIZE\n1       NA      NA    NA     NA      NA       NA    NA       NA      NA\n2       NA      NA     1      4      NA       NA    NA       NA      NA\n3       NA      NA    NA     NA      NA       NA    NA       NA      NA\n4       NA      NA    NA     40      NA       NA    NA       NA      NA\n5       NA      NA    NA    240      NA       NA    NA       NA      NA\n6       NA      NA    NA     NA      NA       NA    NA       NA      NA\n  FIRMSIZE DURUNEMP FLOWUNEM UNEMFTPT WHYLEFTO WHYLEFTN DURJLESS AVAILABL\n1       NA       NA       NA       NA       NA       NA      159       NA\n2       NA       NA       NA       NA       NA       NA       NA       NA\n3       NA       NA       NA       NA       NA       NA      185       NA\n4       NA       NA       NA       NA       NA       NA       NA       NA\n5       NA       NA       NA       NA       NA       NA       NA       NA\n6       NA       NA       NA       NA       NA       NA       17       NA\n  LKPUBAG LKEMPLOY LKRELS LKATADS LKANSADS LKOTHERN PRIORACT YNOLOOK TLOLOOK\n1      NA       NA     NA      NA       NA       NA       NA      NA      NA\n2      NA       NA     NA      NA       NA       NA       NA      NA      NA\n3      NA       NA     NA      NA       NA       NA       NA      NA      NA\n4      NA       NA     NA      NA       NA       NA       NA      NA      NA\n5      NA       NA     NA      NA       NA       NA       NA      NA      NA\n6      NA       NA     NA      NA       NA       NA       NA      NA      NA\n  SCHOOLN EFAMTYPE AGYOWNK FINALWT\n1       1        5      NA     537\n2       1        2      NA     106\n3      NA       11      NA     164\n4       1       18      NA     143\n5       1        1      NA     218\n6       1        6       1     575\n\nis.data.frame(lfs_2023)\n\n[1] TRUE\n\nlfs_2023$WAGES <- rnorm(nrow(lfs_2023), 100, 8) # create a variable by name in a dataframe\nlfs_2023$BENEFITS <- rexp(nrow(lfs_2023), 1/25)\nlfs_2023t <- tibble::as_tibble(lfs_2023) # convert our dataframe to the enhance dataframe type tibble\nlfs_2023t\n\n# A tibble: 108,982 × 62\n   REC_NUM SURVYEAR SURVMNTH LFSSTAT  PROV   CMA AGE_12 AGE_6   SEX MARSTAT\n     <int>    <int>    <int>   <int> <int> <int>  <int> <int> <int>   <int>\n 1       1     2023        9       4    48     7     10    NA     2       1\n 2       2     2023        9       1    13     0     10    NA     1       1\n 3       3     2023        9       4    24     0     12    NA     2       2\n 4       4     2023        9       1    47     0      7    NA     1       1\n 5       5     2023        9       1    46     6      9    NA     1       6\n 6       6     2023        9       4    35     3      2     4     2       2\n 7       7     2023        9       4    24     0     12    NA     2       1\n 8       8     2023        9       1    11     0      6    NA     1       1\n 9       9     2023        9       4    35     0     12    NA     1       1\n10      10     2023        9       1    24     0      7    NA     1       5\n# ℹ 108,972 more rows\n# ℹ 52 more variables: EDUC <int>, MJH <int>, EVERWORK <int>, FTPTLAST <int>,\n#   COWMAIN <int>, IMMIG <int>, NAICS_21 <int>, NOC_10 <int>, NOC_43 <int>,\n#   YABSENT <int>, WKSAWAY <int>, PAYAWAY <int>, UHRSMAIN <int>,\n#   AHRSMAIN <int>, FTPTMAIN <int>, UTOTHRS <int>, ATOTHRS <int>,\n#   HRSAWAY <int>, YAWAY <int>, PAIDOT <int>, UNPAIDOT <int>, XTRAHRS <int>,\n#   WHYPT <int>, TENURE <int>, PREVTEN <int>, HRLYEARN <int>, UNION <int>, …\n\nstr(lfs_2023t) # structure\n\ntibble [108,982 × 62] (S3: tbl_df/tbl/data.frame)\n $ REC_NUM : int [1:108982] 1 2 3 4 5 6 7 8 9 10 ...\n $ SURVYEAR: int [1:108982] 2023 2023 2023 2023 2023 2023 2023 2023 2023 2023 ...\n $ SURVMNTH: int [1:108982] 9 9 9 9 9 9 9 9 9 9 ...\n $ LFSSTAT : int [1:108982] 4 1 4 1 1 4 4 1 4 1 ...\n $ PROV    : int [1:108982] 48 13 24 47 46 35 24 11 35 24 ...\n $ CMA     : int [1:108982] 7 0 0 0 6 3 0 0 0 0 ...\n $ AGE_12  : int [1:108982] 10 10 12 7 9 2 12 6 12 7 ...\n $ AGE_6   : int [1:108982] NA NA NA NA NA 4 NA NA NA NA ...\n $ SEX     : int [1:108982] 2 1 2 1 1 2 2 1 1 1 ...\n $ MARSTAT : int [1:108982] 1 1 2 1 6 2 1 1 1 5 ...\n $ EDUC    : int [1:108982] 2 5 0 2 3 4 0 2 2 5 ...\n $ MJH     : int [1:108982] NA 1 NA 1 1 NA NA 1 NA 1 ...\n $ EVERWORK: int [1:108982] 2 NA 2 NA NA 2 3 NA 2 NA ...\n $ FTPTLAST: int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ COWMAIN : int [1:108982] NA 6 NA 5 6 NA NA 3 NA 6 ...\n $ IMMIG   : int [1:108982] 3 3 3 2 3 3 3 3 3 3 ...\n $ NAICS_21: int [1:108982] NA 15 NA 6 6 NA NA 10 NA 12 ...\n $ NOC_10  : int [1:108982] NA 9 NA 8 1 NA NA 1 NA 2 ...\n $ NOC_43  : int [1:108982] NA 40 NA 35 4 NA NA 3 NA 5 ...\n $ YABSENT : int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ WKSAWAY : int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ PAYAWAY : int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ UHRSMAIN: int [1:108982] NA 250 NA 400 500 NA NA 450 NA 400 ...\n $ AHRSMAIN: int [1:108982] NA 250 NA 400 500 NA NA 500 NA 400 ...\n $ FTPTMAIN: int [1:108982] NA 2 NA 1 1 NA NA 1 NA 1 ...\n $ UTOTHRS : int [1:108982] NA 250 NA 400 500 NA NA 450 NA 400 ...\n $ ATOTHRS : int [1:108982] NA 250 NA 400 500 NA NA 500 NA 400 ...\n $ HRSAWAY : int [1:108982] NA NA NA NA NA NA NA 0 NA NA ...\n $ YAWAY   : int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ PAIDOT  : int [1:108982] NA NA NA NA NA NA NA 150 NA NA ...\n $ UNPAIDOT: int [1:108982] NA NA NA NA NA NA NA 0 NA NA ...\n $ XTRAHRS : int [1:108982] NA NA NA NA NA NA NA 150 NA NA ...\n $ WHYPT   : int [1:108982] NA 1 NA NA NA NA NA NA NA NA ...\n $ TENURE  : int [1:108982] NA 4 NA 40 240 NA NA 240 NA 240 ...\n $ PREVTEN : int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ HRLYEARN: int [1:108982] NA NA NA NA NA NA NA 4418 NA NA ...\n $ UNION   : int [1:108982] NA NA NA NA NA NA NA 3 NA NA ...\n $ PERMTEMP: int [1:108982] NA NA NA NA NA NA NA 1 NA NA ...\n $ ESTSIZE : int [1:108982] NA NA NA NA NA NA NA 4 NA NA ...\n $ FIRMSIZE: int [1:108982] NA NA NA NA NA NA NA 4 NA NA ...\n $ DURUNEMP: int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ FLOWUNEM: int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ UNEMFTPT: int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ WHYLEFTO: int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ WHYLEFTN: int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ DURJLESS: int [1:108982] 159 NA 185 NA NA 17 NA NA 240 NA ...\n $ AVAILABL: int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ LKPUBAG : int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ LKEMPLOY: int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ LKRELS  : int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ LKATADS : int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ LKANSADS: int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ LKOTHERN: int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ PRIORACT: int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ YNOLOOK : int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ TLOLOOK : int [1:108982] NA NA NA NA NA NA NA NA NA NA ...\n $ SCHOOLN : int [1:108982] 1 1 NA 1 1 1 NA 1 NA 1 ...\n $ EFAMTYPE: int [1:108982] 5 2 11 18 1 6 11 3 11 14 ...\n $ AGYOWNK : int [1:108982] NA NA NA NA NA 1 NA 3 NA 2 ...\n $ FINALWT : int [1:108982] 537 106 164 143 218 575 247 44 127 108 ...\n $ WAGES   : num [1:108982] 110.1 105.3 105.9 98.4 99 ...\n $ BENEFITS: num [1:108982] 4.02 29.55 18.32 44.65 12.49 ..."
  },
  {
    "objectID": "Sas_R_comparisons.html#quick-exploration-of-the-lfs-dataset",
    "href": "Sas_R_comparisons.html#quick-exploration-of-the-lfs-dataset",
    "title": "SAS and R comparisons",
    "section": "Quick exploration of the lfs dataset",
    "text": "Quick exploration of the lfs dataset\n\ndim(lfs_2023t) # number of rows and columns\n\n[1] 108982     62\n\n## keep variables REC_NUM, LFSSTAT, PROV, \nlist_of_variables <- toupper(c(\"REC_NUM\", \"PROV\", \"MARSTAT\", \"NOC_10\", \"FINALWT\",\"sex\", \"COWMAIN\"))\nvar_of_interest <- toupper(c(\"rec_num\",\"LFSSTAT\", \"everwork\", \"permtemp\", \"wages\", \"benefits\"))\n\nfile_var_analysis <- lfs_2023t %>% select(all_of(list_of_variables))\nfile_var_interest<- lfs_2023t %>% select(all_of(var_of_interest) ) ## used all_of() because the use of a vector is now deprecated.\n\n\nBloc 1: Datasets: drop, keep and rename variables\n\n# bloc 1: drop and rename variables\n## drop \nfile_var_analysis <- file_var_analysis %>% select(-COWMAIN)\n## rename the variable weight to fweight\nfile_var_analysis <- file_var_analysis %>% rename(FWEIGHT = FINALWT)\n\n\n\nBloc 2: New variables and conditional editing\nCreate a variable called INCOME as the sum of WAGES and BENEFITS.\n\nfile_var_interest <- file_var_interest %>% mutate(INCOME = WAGES + BENEFITS)\nfile_var_interest[, c(\"REC_NUM\",\"INCOME\", \"WAGES\", \"BENEFITS\")] # can use select() too\n\n# A tibble: 108,982 × 4\n   REC_NUM INCOME WAGES BENEFITS\n     <int>  <dbl> <dbl>    <dbl>\n 1       1   114. 110.      4.02\n 2       2   135. 105.     29.6 \n 3       3   124. 106.     18.3 \n 4       4   143.  98.4    44.6 \n 5       5   111.  99.0    12.5 \n 6       6   107. 100.      7.33\n 7       7   127. 106.     21.1 \n 8       8   202. 106.     95.9 \n 9       9   114. 103.     11.2 \n10      10   155. 111.     44.5 \n# ℹ 108,972 more rows\n\n#file_var_interest %>% select(REC_NUM, INCOME, WAGES, BENEFITS)\n\nConditional editing - Use the table below to split Canada into different regions.\n\nRegions in Canada\n\n\n\n\n\n\nRegions\nProvinces\n\n\n\n\nBritish Columbia\nBritish Columbia (59)\n\n\nCanadian Prairies\nAlberta (48), Saskatchewan (47), Manitoba (46)\n\n\nOntario\nOntario (35)\n\n\nQuebec\nQuebec (24)\n\n\nAtlantic Canada\nNew Brunswick (13), Prince Edward Island (11), Nova Scotia (12), Newfoundland and Labrador (10)\n\n\nNorthern Canada\nYukon, Northwest Territories, Nunavut\n\n\n\n\n# frequency\ntable(file_var_analysis$PROV)\n\n\n   10    11    12    13    24    35    46    47    48    59 \n 4959  2572  5213  5368 19671 36239  7447  5950  8587 12976 \n\nfile_var_analysis <- file_var_analysis %>% mutate(region = case_when(PROV %in% c(59) ~ \"British Columbia\", PROV %in% c(48,47,46) ~ \"Prairies\", PROV %in% c(35) ~\"Ontario\", PROV %in% c(24) ~\"Quebec\", PROV %in% c(13,11,12,10) ~ \"Atlantic\", TRUE~ \"\"))\n\nfile_var_analysis\n\n# A tibble: 108,982 × 7\n   REC_NUM  PROV MARSTAT NOC_10 FWEIGHT   SEX region  \n     <int> <int>   <int>  <int>   <int> <int> <chr>   \n 1       1    48       1     NA     537     2 Prairies\n 2       2    13       1      9     106     1 Atlantic\n 3       3    24       2     NA     164     2 Quebec  \n 4       4    47       1      8     143     1 Prairies\n 5       5    46       6      1     218     1 Prairies\n 6       6    35       2     NA     575     2 Ontario \n 7       7    24       1     NA     247     2 Quebec  \n 8       8    11       1      1      44     1 Atlantic\n 9       9    35       1     NA     127     1 Ontario \n10      10    24       5      2     108     1 Quebec  \n# ℹ 108,972 more rows\n\ntable(file_var_analysis$region, useNA = \"ifany\")\n\n\n        Atlantic British Columbia          Ontario         Prairies \n           18112            12976            36239            21984 \n          Quebec \n           19671 \n\n\nConditional editing using ** if_else**\n\nfile_var_interest <- file_var_interest %>% mutate(RICH = if_else(INCOME > 105, 1,0))\n\ntable(file_var_interest$RICH)\n\n\n    0     1 \n21985 86997 \n\n\n\n\nBloc 3: Conditional filtering\nCreate a file containing only records with variable \\(RICH = 1\\).\n\nrich_guys <- file_var_interest %>% filter(RICH == 1)\nprint(rich_guys)\n\n# A tibble: 86,997 × 8\n   REC_NUM LFSSTAT EVERWORK PERMTEMP WAGES BENEFITS INCOME  RICH\n     <int>   <int>    <int>    <int> <dbl>    <dbl>  <dbl> <dbl>\n 1       1       4        2       NA 110.      4.02   114.     1\n 2       2       1       NA       NA 105.     29.6    135.     1\n 3       3       4        2       NA 106.     18.3    124.     1\n 4       4       1       NA       NA  98.4    44.6    143.     1\n 5       5       1       NA       NA  99.0    12.5    111.     1\n 6       6       4        2       NA 100.      7.33   107.     1\n 7       7       4        3       NA 106.     21.1    127.     1\n 8       8       1       NA        1 106.     95.9    202.     1\n 9       9       4        2       NA 103.     11.2    114.     1\n10      10       1       NA       NA 111.     44.5    155.     1\n# ℹ 86,987 more rows\n\n\nCreate a file containing only married and living in common-law\n\nin_couple <- file_var_analysis %>% filter(MARSTAT %in% c(1,2))\nin_couple\n\n# A tibble: 65,688 × 7\n   REC_NUM  PROV MARSTAT NOC_10 FWEIGHT   SEX region  \n     <int> <int>   <int>  <int>   <int> <int> <chr>   \n 1       1    48       1     NA     537     2 Prairies\n 2       2    13       1      9     106     1 Atlantic\n 3       3    24       2     NA     164     2 Quebec  \n 4       4    47       1      8     143     1 Prairies\n 5       6    35       2     NA     575     2 Ontario \n 6       7    24       1     NA     247     2 Quebec  \n 7       8    11       1      1      44     1 Atlantic\n 8       9    35       1     NA     127     1 Ontario \n 9      11    24       1     NA     212     1 Quebec  \n10      13    35       1     NA      89     1 Ontario \n# ℹ 65,678 more rows\n\ntable(in_couple$PROV) # number of people in couple in the file\n\n\n   10    11    12    13    24    35    46    47    48    59 \n 3193  1566  3025  3236 11692 21723  4521  3603  5320  7809 \n\n\n\n\nBloc 4: Counting and summarizing\nNumber of males and females in the file.\n\nfile_var_analysis %>% count(SEX)\n\n# A tibble: 2 × 2\n    SEX     n\n  <int> <int>\n1     1 52999\n2     2 55983\n\n\nNumber of males and females by region in Canada in the file.\n\nfile_var_analysis %>% count(region, SEX)\n\n# A tibble: 10 × 3\n   region             SEX     n\n   <chr>            <int> <int>\n 1 Atlantic             1  8726\n 2 Atlantic             2  9386\n 3 British Columbia     1  6305\n 4 British Columbia     2  6671\n 5 Ontario              1 17637\n 6 Ontario              2 18602\n 7 Prairies             1 10753\n 8 Prairies             2 11231\n 9 Quebec               1  9578\n10 Quebec               2 10093\n\n\nAdding percentage - can call mutate()\n\nfile_var_analysis %>% count(region, SEX) %>% mutate(percent = 100*n/sum(n))\n\n# A tibble: 10 × 4\n   region             SEX     n percent\n   <chr>            <int> <int>   <dbl>\n 1 Atlantic             1  8726    8.01\n 2 Atlantic             2  9386    8.61\n 3 British Columbia     1  6305    5.79\n 4 British Columbia     2  6671    6.12\n 5 Ontario              1 17637   16.2 \n 6 Ontario              2 18602   17.1 \n 7 Prairies             1 10753    9.87\n 8 Prairies             2 11231   10.3 \n 9 Quebec               1  9578    8.79\n10 Quebec               2 10093    9.26\n\n\nNumber of people by marital status and regions.\n\nfile_var_analysis %>% group_by(region, MARSTAT) %>% summarize(nrecords = n())\n\n`summarise()` has grouped output by 'region'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 30 × 3\n# Groups:   region [5]\n   region           MARSTAT nrecords\n   <chr>              <int>    <int>\n 1 Atlantic               1     9051\n 2 Atlantic               2     1969\n 3 Atlantic               3     1118\n 4 Atlantic               4      465\n 5 Atlantic               5      875\n 6 Atlantic               6     4634\n 7 British Columbia       1     6540\n 8 British Columbia       2     1269\n 9 British Columbia       3      733\n10 British Columbia       4      281\n# ℹ 20 more rows\n\n\n\n\nBloc 5: Combining datasets\nCombining by rows\n\n# for tests purposes only\ndata1 <- file_var_analysis %>% slice((1:50000))\ndata2 <- file_var_analysis %>% slice(-(1:50000))\n\n# combine the two sets\ncomb_file  <- bind_rows(data1, data2)\nidentical(comb_file, file_var_analysis) # return TRUE - both files are identical\n\n[1] TRUE\n\nrm(list = c(\"comb_file\"))\n\nMerging files\n\n# inner join == in(a and b)\nfile_inner_join <- file_var_interest %>% inner_join(file_var_analysis, by = \"REC_NUM\")\n\nfile_left_join <- file_var_interest %>% left_join(file_var_analysis, by = \"REC_NUM\")\n\nfile_right_join <- file_var_interest %>% right_join(file_var_analysis, by = \"REC_NUM\")\n\n\n\nBloc 6:\n\n# weighted sum\nfile_inner_join %>% group_by(region) %>% summarize( tot_income = sum(INCOME*FWEIGHT))\n\n# A tibble: 5 × 2\n  region            tot_income\n  <chr>                  <dbl>\n1 Atlantic          270210544.\n2 British Columbia  569578981.\n3 Ontario          1608650859.\n4 Prairies          726689117.\n5 Quebec            909570119.\n\n# Number of weighted people\nfile_inner_join %>% group_by(region) %>% summarize( tot_pers = sum(FWEIGHT))\n\n# A tibble: 5 × 2\n  region           tot_pers\n  <chr>               <int>\n1 Atlantic          2160780\n2 British Columbia  4547990\n3 Ontario          12899730\n4 Prairies          5820510\n5 Quebec            7287274\n\n# number of females weighted\nfile_inner_join %>% group_by(region) %>% summarize( tot_females = sum(FWEIGHT*(SEX = 2)))\n\n# A tibble: 5 × 2\n  region           tot_females\n  <chr>                  <dbl>\n1 Atlantic             4321560\n2 British Columbia     9095980\n3 Ontario             25799460\n4 Prairies            11641020\n5 Quebec              14574548"
  },
  {
    "objectID": "ReadingExternalDataFiles.html#reading-sas-files",
    "href": "ReadingExternalDataFiles.html#reading-sas-files",
    "title": "Reading external data files",
    "section": "Reading SAS files",
    "text": "Reading SAS files"
  },
  {
    "objectID": "ReadingExternalDataFiles.html#reading-csv-files",
    "href": "ReadingExternalDataFiles.html#reading-csv-files",
    "title": "Reading external data files",
    "section": "Reading CSV files",
    "text": "Reading CSV files"
  },
  {
    "objectID": "ReadingExternalDataFiles.html#reading-excel-files",
    "href": "ReadingExternalDataFiles.html#reading-excel-files",
    "title": "Reading external data files",
    "section": "Reading EXCEL files",
    "text": "Reading EXCEL files"
  },
  {
    "objectID": "docs/Factors_v2.html",
    "href": "docs/Factors_v2.html",
    "title": "Factors",
    "section": "",
    "text": "Factors are often used to analyze categorical variables.\nFactors have attributes: levels and class.\nThis tutorial is about the use of factors."
  },
  {
    "objectID": "docs/Factors_v2.html#creating-factors",
    "href": "docs/Factors_v2.html#creating-factors",
    "title": "Factors",
    "section": "Creating factors",
    "text": "Creating factors\nFactors can be created using the function factor. A given vector can also be coerced into a factor using the function as.factor.\n\n## SGC codes.\nprov_levels <- c(10,11,12,13,24,35,46,47,48,59)\nprov_levels <- as.character(prov_levels)\n\ndta <- c(\"47\", \"35\", \"11\", \"24\" ,\"48\", \"48\", \"59\", \"59\" ,\"24\", \"35\", \"13\" ,\"61\",\"12\", \"11\", \"13\", \"10\", \"59\", \"48\" ,\"62\", \"48\")\n\n\n## creating a factor variable based on dta\ndta_factor <- factor(dta, levels = prov_levels)\ndta_factor\n\n [1] 47   35   11   24   48   48   59   59   24   35   13   <NA> 12   11   13  \n[16] 10   59   48   <NA> 48  \nLevels: 10 11 12 13 24 35 46 47 48 59\n\n## attributes\nattributes(dta_factor)\n\n$levels\n [1] \"10\" \"11\" \"12\" \"13\" \"24\" \"35\" \"46\" \"47\" \"48\" \"59\"\n\n$class\n[1] \"factor\"\n\n\nWe can also create the factor variable without specifying the expected levels.\n\ndta_factor2 <- factor(dta)\n###> What to expect?"
  },
  {
    "objectID": "docs/Factors_v2.html#reading-a-factor-variable",
    "href": "docs/Factors_v2.html#reading-a-factor-variable",
    "title": "Factors",
    "section": "Reading a factor variable",
    "text": "Reading a factor variable\nWe can read a factor variable the same way we read a basic vector.\n\ndta_factor[1] # access first element\n\n[1] 47\nLevels: 10 11 12 13 24 35 46 47 48 59\n\ndta_factor[2:5] # elements from position 2 to 5\n\n[1] 35 11 24 48\nLevels: 10 11 12 13 24 35 46 47 48 59"
  },
  {
    "objectID": "docs/Factors_v2.html#updating-a-factor-variable",
    "href": "docs/Factors_v2.html#updating-a-factor-variable",
    "title": "Factors",
    "section": "Updating a factor variable",
    "text": "Updating a factor variable\nFactors can be updated by changing the value of the expected levels.\n\n## add territorial in the levels.\ndta_f_terr <- factor(dta, levels = c(prov_levels, c(\"60\",\"61\",\"62\")))\ndta_f_terr \n\n [1] 47 35 11 24 48 48 59 59 24 35 13 61 12 11 13 10 59 48 62 48\nLevels: 10 11 12 13 24 35 46 47 48 59 60 61 62"
  },
  {
    "objectID": "docs/Factors_v2.html#deleting-a-factor-variable",
    "href": "docs/Factors_v2.html#deleting-a-factor-variable",
    "title": "Factors",
    "section": "Deleting a factor variable",
    "text": "Deleting a factor variable\nLike any other objects.\n\nrm(list = c(\"dta_f_terr\"))"
  },
  {
    "objectID": "docs/Factors_v2.html#factors-in-practice",
    "href": "docs/Factors_v2.html#factors-in-practice",
    "title": "Factors",
    "section": "Factors in practice",
    "text": "Factors in practice\n\nIn a data.frame\n\nframe <- data.frame(income = rexp(20, rate = 0.05), province_code = dta)\n\nis.data.frame(frame)\n\n[1] TRUE\n\n## convert province_code to a factor\nframe$province_code <- factor(frame$province_code, levels = prov_levels)\nstr(frame)\n\n'data.frame':   20 obs. of  2 variables:\n $ income       : num  7.02 24.39 11.37 23.67 29.43 ...\n $ province_code: Factor w/ 10 levels \"10\",\"11\",\"12\",..: 8 6 2 5 9 9 10 10 5 6 ...\n\n\n\n\nEditing\n\n## identifying out of scope provinces and how many are they\n\nsum(is.na(frame$province_code)) \n\n[1] 2\n\n\n\n# computing table of frequency - remember function table\ntable(frame[, c(\"province_code\")], useNA = \"always\")\n\n\n  10   11   12   13   24   35   46   47   48   59 <NA> \n   1    2    1    2    2    2    0    1    4    3    2 \n\n\n\n## if we are not happy with the other - change the other in the levels\ndta_factor_2prov <- factor(frame$province_code, levels = c(\"35\", \"24\"))\ntable(dta_factor_2prov)\n\ndta_factor_2prov\n35 24 \n 2  2 \n\n\n\n## creating income classes\n\nframe$income_class <- cut(frame$income, breaks = min(frame$income) + 10*(0:5))\nframe\n\n      income province_code income_class\n1   7.016341            47  (2.22,12.2]\n2  24.385801            35  (22.2,32.2]\n3  11.371155            11  (2.22,12.2]\n4  23.672669            24  (22.2,32.2]\n5  29.432501            48  (22.2,32.2]\n6   2.216520            48         <NA>\n7  46.626108            59  (42.2,52.2]\n8   8.467837            59  (2.22,12.2]\n9  71.804058            24         <NA>\n10  4.205994            35  (2.22,12.2]\n11 51.802455            13  (42.2,52.2]\n12 52.632397          <NA>         <NA>\n13 39.643247            12  (32.2,42.2]\n14  6.389770            11  (2.22,12.2]\n15  5.098031            13  (2.22,12.2]\n16 18.518894            10  (12.2,22.2]\n17 14.732434            59  (12.2,22.2]\n18 51.732026            48  (42.2,52.2]\n19  7.694025          <NA>  (2.22,12.2]\n20 12.066777            48  (2.22,12.2]\n\n\n\ntable(frame$income_class, frame$province_code)\n\n             \n              10 11 12 13 24 35 46 47 48 59\n  (2.22,12.2]  0  2  0  1  0  1  0  1  1  1\n  (12.2,22.2]  1  0  0  0  0  0  0  0  0  1\n  (22.2,32.2]  0  0  0  0  1  1  0  0  1  0\n  (32.2,42.2]  0  0  1  0  0  0  0  0  0  0\n  (42.2,52.2]  0  0  0  1  0  0  0  0  1  1\n\n\n\n\nCreating some plots\nBarplot\n\nbarplot(table(dta_factor))\n\n\n\n## note that we can change the order in which the labels appear.\n\nPie Chart\n\npie(table(dta_factor_2prov))\n\n\n\n\nMosaicplot\n\nmosaicplot(table(frame$income_class, frame$province_code))\n\n\n\n\nRemarks\nFactors can be used to conduct statistical analyses involving categorical variables. Some models in R required the use of factors.\n\nlm(frame$income ~ frame$province_code)\n\n\nCall:\nlm(formula = frame$income ~ frame$province_code)\n\nCoefficients:\n          (Intercept)  frame$province_code11  frame$province_code12  \n               18.519                 -9.638                 21.124  \nframe$province_code13  frame$province_code24  frame$province_code35  \n                9.931                 29.219                 -4.223  \nframe$province_code47  frame$province_code48  frame$province_code59  \n              -11.503                  5.343                  4.757"
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "Notes",
    "section": "",
    "text": "Management philosophy: recruitment of bright and self-motivated individuals and give them the freedom to come up with their own ideas.\nAt the same time, there was a belief that some of these ideas would fundamentally be valuable for Communication, and so for the parent company - Can this mindset be used at Statistics Canada also?\n\nImport and Export with R\nText file - the easiest form of data to import into R, and an acceptable solution for small and medium scale problems.\nFunction scan as the primary function to import text file data.\nMethodologists have to deal everyday with data in some proprietary binary format such as Excel and SAS. “Often the simplest thing to do is to use the originating application to export the data as a text file (and statistical consultants will have copies of the most common applications on their computers for that purpose).” However, this is not always possible, and in this chapter we will see some available solutions that allow to read these proprietary data directly from R.\nData stored in a binary form for compactness and speed of access. One application of this is imaging data, which is normally stored as a stream of bytes as represented in memory.\nFor larger data sets, it is common to handle the data using a database management system. (DBMS).\nChapter 9 - Reading Excel spreadsheet.\nChapter 3 - importing from other statistical systems.\nChapter 5 - Binary files.\nChapter 4 - Relational databases.\nEncoding: File encodings, also known as character encodings, specify how to represent characters when text processing.\nExamples: UTF-8 Unicode English text; ISO-8859 English text; UTF-8 Unicode text, UTF-8 Unicode (with BOM) text.\nWe can be reduced to looking at the file with the command-line utility od or a hex editor to work out its encoding.\nExport to text files\nFunction cat underlies the functions for exporting data. It takes a file argument, and the append argument allows a text file to written via successive calls to cat. Better, especially if this is to be done many times, is to open a file connection for writing or appending, and cat to that connection, then close it.\nFunctions: write, write.table - write is a wrapper to cat.\nIssues:\n\nPrecision\nheader line: some systems required entry for the row names, which is what write.table will provide if argument col.names = NA is specified. Excel is one such system.\nseparator: a field separator is a comma. as that is unlikely to appear in any of the fields in English-speaking countries. Such files are known as CSV (comma separated values) files.\nMissing values: missing valuer are output as NA, but this may be changed by argument na. NaN are treated as NA by write.table but not by cat nor write.\nQuoting strings\nEncodings: text files do not contain metadata on their encodings, so for non-ASCII data the file needs to be targetted to the application intended to read it.\n\nBenefits to the use a file format such as XML.\n\nOther files you must provide all the metadata - such as the encoding, value separator, missing values etc. But with XML, the information is embedded in there.\n\nPackages mentionned in the document:\nCRAN - Package XML (r-project.org)\n\nlibrary(\"XML\")\nlibrary(\"methods\")\n\ngetwd()\n\n[1] \"C:/Users/nambchr/Desktop/tutorials/tutorials/tutorials\"\n\npath2 <- \"C:/Users/nambchr/Desktop/tutorials/tutorials\"\n\nresult <- XML::xmlParse(file = paste0(path2,\"/\", \"input.xml\"))\nprint(result)\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bookstore>\n  <book category=\"cooking\">\n    <title lang=\"en\">Everyday Italian</title>\n    <author>Giada De Laurentiis</author>\n    <year>2005</year>\n    <price>30.00</price>\n  </book>\n  <book category=\"children\">\n    <title lang=\"en\">Harry Potter</title>\n    <author>J K. Rowling</author>\n    <year>2005</year>\n    <price>29.99</price>\n  </book>\n  <book category=\"web\">\n    <title lang=\"en\">XQuery Kick Start</title>\n    <author>James McGovern</author>\n    <author>Per Bothner</author>\n    <author>Kurt Cagle</author>\n    <author>James Linn</author>\n    <author>Vaidyanathan Nagarajan</author>\n    <year>2003</year>\n    <price>49.99</price>\n  </book>\n  <book category=\"web\" cover=\"paperback\">\n    <title lang=\"en\">Learning XML</title>\n    <author>Erik T. Ray</author>\n    <year>2003</year>\n    <price>39.95</price>\n  </book>\n</bookstore>\n \n\n\n\n# extract the root node\nrootnode <- XML::xmlRoot(result)\nrootnode[1]\n\n$book\n<book category=\"cooking\">\n  <title lang=\"en\">Everyday Italian</title>\n  <author>Giada De Laurentiis</author>\n  <year>2005</year>\n  <price>30.00</price>\n</book> \n\nattr(,\"class\")\n[1] \"XMLInternalNodeList\" \"XMLNodeList\"        \n\n## Extract some elements.\n\n\n\nBibliography\nCore team, 2000 “R Data Import/Export”.\nConnection in R"
  },
  {
    "objectID": "ReadingExternalDataFiles.html#creating-data-sets-to-use-in-the-tutorial",
    "href": "ReadingExternalDataFiles.html#creating-data-sets-to-use-in-the-tutorial",
    "title": "Reading external data files",
    "section": "Creating data sets to use in the tutorial",
    "text": "Creating data sets to use in the tutorial\n\ngetwd()\n\n[1] \"C:/Users/nambchr/Desktop/tutorials/tutorials/tutorials\"\n\npath <- \"C:/Users/nambchr/Desktop/tutorials/tutorials/session3/data\""
  },
  {
    "objectID": "ReadingExternalDataFiles.html#importing-from-a-text-file",
    "href": "ReadingExternalDataFiles.html#importing-from-a-text-file",
    "title": "Reading external data files",
    "section": "Importing from a text file",
    "text": "Importing from a text file\nscan\nbinary format: compactness and speed of access.\nimaging data - stored as stream of bytes as represented in memory\nDBMS: for larger databases.\nImporting data via network connections.\nEncoding:\n\nASCII\nthe file command-line to find the structure."
  },
  {
    "objectID": "SQL_and_R.html",
    "href": "SQL_and_R.html",
    "title": "SQL and R",
    "section": "",
    "text": "In this tuto, we’ll cover database queries using RSQLite connection.\nThe following functions of the DBI package used throughout the tutorial:"
  },
  {
    "objectID": "SQL_and_R.html#install-required-packages",
    "href": "SQL_and_R.html#install-required-packages",
    "title": "SQL and R",
    "section": "1. Install required packages",
    "text": "1. Install required packages\n\n## Installing packages\n#installed.packages(\"DBI\")\n#install.packages(\"RSQLite\")\n#install.packages(\"readxl\")\n\n## loading them\nlibrary(DBI)\nlibrary(RSQLite) # not installed by default on AVD\nlibrary(readxl)"
  },
  {
    "objectID": "SQL_and_R.html#setting-the-working-directory",
    "href": "SQL_and_R.html#setting-the-working-directory",
    "title": "SQL and R",
    "section": "2. Setting the working directory",
    "text": "2. Setting the working directory\n\n# assuming the relative working folder is called R\npath <- \"C:/Users/nambchr/Desktop/tutorials/R\"\nsetwd(path)"
  },
  {
    "objectID": "SQL_and_R.html#database",
    "href": "SQL_and_R.html#database",
    "title": "SQL and R",
    "section": "3. Database",
    "text": "3. Database\nThe database structure will look like this:\n\nThere are four tables:\nSERVICE (Num_S, Libellé, Étage, Chef) \nEMPLOYÉ (Num_E, Nom_E, Fonction, Salaire, Num_S)  \nPROJET (Num_P, Titre, Début_P, Fin_P, Num_S) \nAGIT (Num_E, Num_P, Rôle) \nEMPLOYE table \nSERVICE\n\nPROJET\n\nAGIT"
  },
  {
    "objectID": "SQL_and_R.html#database-structure",
    "href": "SQL_and_R.html#database-structure",
    "title": "SQL and R",
    "section": "3. Database Structure",
    "text": "3. Database Structure\nThe database structure will look like this:\n\nThere are four tables:\nSERVICE (Num_S, Libellé, Étage, Chef) \nEMPLOYÉ (Num_E, Nom_E, Fonction, Salaire, Num_S)  \nPROJET (Num_P, Titre, Début_P, Fin_P, Num_S) \nAGIT (Num_E, Num_P, Rôle) \nEMPLOYE table \nSERVICE\n\nPROJET\n\nAGIT"
  },
  {
    "objectID": "SQL_and_R.html#database-creation",
    "href": "SQL_and_R.html#database-creation",
    "title": "SQL and R",
    "section": "4. Database creation",
    "text": "4. Database creation\n\ngetwd()\n\n[1] \"C:/Users/nambchr/Desktop/tutorials/tutorials/tutorials\"\n\n## Read data from a different sources;\nemploye <- readxl::read_excel(path = \"base_donnees.xlsx\", sheet = \"Employe\")\n\nWarning in strptime(x, format, tz = tz): unable to identify current timezone 'E':\nplease set environment variable 'TZ'\n\nservice <- readxl::read_excel(path = \"base_donnees.xlsx\", sheet = \"Service\")\nproject <- readxl::read_excel(path = \"base_donnees.xlsx\", sheet = \"Projet\")\nagit <- readxl::read_excel(path = \"base_donnees.xlsx\", sheet = \"agit\")\n\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\") # establish a connection\ndbListTables(con) # Check the tables in the database\n\ncharacter(0)\n\ndbWriteTable(con, \"employe\", employe, overwrite = TRUE)\ndbWriteTable(con ,\"service\", service, overwrite = TRUE)\ndbWriteTable(con ,\"project\", project, overwrite = TRUE)\ndbWriteTable(con ,\"agit\", agit, overwrite = TRUE)\n\ndbListTables(con)\n\n[1] \"agit\"    \"employe\" \"project\" \"service\"\n\n## remove the four dataframes employe, service, project, and agit\nrm(list= c(\"employe\", \"service\", \"project\", \"agit\"))"
  },
  {
    "objectID": "SQL_and_R.html#questions",
    "href": "SQL_and_R.html#questions",
    "title": "SQL and R",
    "section": "5. Questions",
    "text": "5. Questions\n\nCreate a new EmployeeSpecial table containing employees with Num _E <8000\n\n\n## Create a new table containing employee with num_e < 8000\ndbExecute(con, \"create table employeSpecial as select * from employe where num_e < 8000\")\n\n[1] 0\n\n\n\nUpdate the EmployeeSpecial table by replacing the Num_E value with 7777 for employee ‘Nadia Tazi’.\n\n## Update the table employeSpecial by replacing num_e by 7777 for the employee Nadia tazi\ndbExecute(con, \"update employeSpecial set num_e = 7777 where nom_e = 'Nadia Tazi' \")\n\n[1] 1\n\ndbReadTable(con, \"employeSpecial\")\n\n  num_e         nom_e    fonction salaire num_s\n1  1000  Alain Latour    Analyste   55000     1\n2  2000 Pierre Plante Programmeur   45000     2\n3  3000   Lyne Boivin    Analyste   60000     2\n4  4000    Luc Nadeau   Opérateur   37000     1\n5  5000    Nabib mili programmeur   42000     2\n6  6000  Jean Delorme Programmeur   40000     3\n7  7777    Nadia Tazi    Analyste   52000     3\n\n\nInsert the following tuple in EmployeeSpecial: 8888, ‘Lien Nguyen’, ‘Analyste’, 57000, 3\n\ndbExecute(con, \"insert into employeSpecial\n            values(8888, 'Lien Nguyen', 'Analyste', 57000, 3)\")\n\n[1] 1\n\n\nFormulate a SQL query that allows you to obtain the list of employees with a salary between $30,000 and $40,000\n\ndbGetQuery(con, \"select * from employeSpecial where salaire between 30000 and 40000\")\n\n  num_e        nom_e    fonction salaire num_s\n1  4000   Luc Nadeau   Opérateur   37000     1\n2  6000 Jean Delorme Programmeur   40000     3\n\n\nFormulate a SQL query that allows you to obtain the names of employees starting with the letter N\n\ndbGetQuery(con, \"select nom_e from employeSpecial where nom_e like 'N%' \")\n\n       nom_e\n1 Nabib mili\n2 Nadia Tazi\n\n\nFormulate a SQL query that allows you to obtain the list of projects managed by department number “1”\n\ndbGetQuery(con, \"select * from project where num_s =1\")\n\n  num_p     titre   debut_p     fin_p num_s\n1    P1      Paie 803692800 812678400     1\n2    P3 Personnel 788054400 798854400     1\n\n\nFormulate a SQL query that allows you to obtain the list of employees who are analysts or programmers\n\ndbGetQuery(con, \"select * from employeSpecial where fonction in('Analyste', 'programmeur')\")\n\n  num_e        nom_e    fonction salaire num_s\n1  1000 Alain Latour    Analyste   55000     1\n2  3000  Lyne Boivin    Analyste   60000     2\n3  5000   Nabib mili programmeur   42000     2\n4  7777   Nadia Tazi    Analyste   52000     3\n5  8888  Lien Nguyen    Analyste   57000     3\n\n\nFormulate a SQL query that obtains the names, positions and salaries of employees who are either programmers or employees with a salary < $45,000 and belonging to department 1\n\ndbGetQuery(con, \"select * from employeSpecial where ( fonction in ('programmeur')\n           or salaire < 45000) and num_s = 1\") \n\n  num_e      nom_e  fonction salaire num_s\n1  4000 Luc Nadeau Opérateur   37000     1\n\n\nFormulate a SQL query that allows you to get the titles of 3 projects with the latest end dates\n\ndbGetQuery(con, \"select titre, fin_p from project order by fin_p desc limit 3\")\n\n     titre     fin_p\n1    Vente 839548800\n2    Achat 837907200\n3 Location 813542400\n\n\nShow the minimum wage per job\n\ndbGetQuery(con, \"select fonction, min(salaire) as min_salaire\n                    from employeSpecial group by fonction\") \n\n     fonction min_salaire\n1    Analyste       52000\n2   Opérateur       37000\n3 Programmeur       40000\n4 programmeur       42000\n\n\nFormulate a SQL query that allows you to obtain the list of employees with a salary higher than the average salary of all employees\n\ndbGetQuery(con, \"select num_e, nom_e, salaire\n                    from employeSpecial where salaire > (select avg(salaire) from employeSpecial)\") \n\n  num_e        nom_e salaire\n1  1000 Alain Latour   55000\n2  3000  Lyne Boivin   60000\n3  7777   Nadia Tazi   52000\n4  8888  Lien Nguyen   57000\n\n\nFormulate a SQL query that allows you to obtain the list of departments that are located on the same floor as the purchasing department\n\ndbGetQuery(con, \"select num_s , libelle from service\n                    where etage = (select etage from service where libelle in('Achats'))and libelle not in('Achats')  \")\n\n  num_s  libelle\n1     2 Finances\n\n\nFormulate a SQL query that allows you to know how many projects each employee is involved in.\n\ndbGetQuery(con, \"select distinct num_e, count(*) as nb_projet from agit group by num_e \")\n\n  num_e nb_projet\n1  1000         2\n2  2000         2\n3  3000         2\n4  4000         1\n5  5000         1\n6  6000         1\n7  7000         2\n8  8000         1\n\n\nFormulate a SQL query that allows you to determine the role assumed by Lyne Boivin in each of the projects in which she is involved? Display project title and role.\n\ndbGetQuery(con, \"select (select nom_e from employeSpecial where nom_e in ('Lyne Boivin') ) as nom_e,\n                  num_p, role from agit where num_e = (select num_e from employeSpecial where nom_e in ('Lyne Boivin'))\")\n\n        nom_e num_p        role\n1 Lyne Boivin    P1 Responsable\n2 Lyne Boivin    P6     Adjoint\n\n\nFormulate a SQL query that allows you to find out how many days ago each project was completed?\n\n\n\nFormulate a SQL query to determine the number of months between the start date of each project and January 1, 2000?\n\n\n\nPerform the following outer join operations on the EmployeeSpecial and AGIT tables:\n\nLEFT OUTER JOIN\nRIGHT OUTER JOIN\nFULL OUTER JOIN.\n\n\ndbGetQuery(con, \"  select a.*, num_p, role from EmployeSpecial as a left outer join agit as b\n                                on a.num_e = b.num_e \")\n\n   num_e         nom_e    fonction salaire num_s num_p          role\n1   1000  Alain Latour    Analyste   55000     1    P2   Responsable\n2   1000  Alain Latour    Analyste   55000     1    P4   Responsable\n3   2000 Pierre Plante Programmeur   45000     2    P2   Programmeur\n4   2000 Pierre Plante Programmeur   45000     2    P4   Superviseur\n5   3000   Lyne Boivin    Analyste   60000     2    P1   Responsable\n6   3000   Lyne Boivin    Analyste   60000     2    P6       Adjoint\n7   4000    Luc Nadeau   Opérateur   37000     1    P5     Opérateur\n8   5000    Nabib mili programmeur   42000     2    P6 Prog-analyste\n9   6000  Jean Delorme Programmeur   40000     3    P3 Prog-analyste\n10  7777    Nadia Tazi    Analyste   52000     3  <NA>          <NA>\n11  8888   Lien Nguyen    Analyste   57000     3  <NA>          <NA>\n\n  dbGetQuery(con, \"select a.*, num_p , role from EmployeSpecial as a right outer join agit as b\n                      on a.num_e = b.num_e\")\n\n   num_e         nom_e    fonction salaire num_s num_p          role\n1   1000  Alain Latour    Analyste   55000     1    P2   Responsable\n2   1000  Alain Latour    Analyste   55000     1    P4   Responsable\n3   2000 Pierre Plante Programmeur   45000     2    P2   Programmeur\n4   2000 Pierre Plante Programmeur   45000     2    P4   Superviseur\n5   3000   Lyne Boivin    Analyste   60000     2    P1   Responsable\n6   3000   Lyne Boivin    Analyste   60000     2    P6       Adjoint\n7   4000    Luc Nadeau   Opérateur   37000     1    P5     Opérateur\n8   5000    Nabib mili programmeur   42000     2    P6 Prog-analyste\n9   6000  Jean Delorme Programmeur   40000     3    P3 Prog-analyste\n10    NA          <NA>        <NA>      NA    NA    P3   Responsable\n11    NA          <NA>        <NA>      NA    NA    P5   Responsable\n12    NA          <NA>        <NA>      NA    NA    P5     Opérateur\n\n  dbGetQuery(con, \"select a.*, num_p, role from EmployeSpecial as a full outer join agit as b\n                    on a.num_e = b.num_e\")\n\n   num_e         nom_e    fonction salaire num_s num_p          role\n1   1000  Alain Latour    Analyste   55000     1    P2   Responsable\n2   1000  Alain Latour    Analyste   55000     1    P4   Responsable\n3   2000 Pierre Plante Programmeur   45000     2    P2   Programmeur\n4   2000 Pierre Plante Programmeur   45000     2    P4   Superviseur\n5   3000   Lyne Boivin    Analyste   60000     2    P1   Responsable\n6   3000   Lyne Boivin    Analyste   60000     2    P6       Adjoint\n7   4000    Luc Nadeau   Opérateur   37000     1    P5     Opérateur\n8   5000    Nabib mili programmeur   42000     2    P6 Prog-analyste\n9   6000  Jean Delorme Programmeur   40000     3    P3 Prog-analyste\n10  7777    Nadia Tazi    Analyste   52000     3  <NA>          <NA>\n11  8888   Lien Nguyen    Analyste   57000     3  <NA>          <NA>\n12    NA          <NA>        <NA>      NA    NA    P3   Responsable\n13    NA          <NA>        <NA>      NA    NA    P5   Responsable\n14    NA          <NA>        <NA>      NA    NA    P5     Opérateur\n\n\nWrite the statement to close the connection\n\ndbDisconnect(con)"
  }
]